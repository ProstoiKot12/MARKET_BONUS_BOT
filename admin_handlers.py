from asyncio import sleep

from bot import *
from user_handlers import get_review

import config

final_corresp_with_user_keyboard = types.ReplyKeyboardMarkup(row_width = 1, resize_keyboard = True)
final_corresp_with_user_keyboard.add("–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É")

cancel_start_mailing_keyboard = types.ReplyKeyboardMarkup(row_width = 1, resize_keyboard = True)
cancel_start_mailing_keyboard.add("–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")

@dp.message_handler(lambda message: message.from_user.id == config.admin_id,
commands = "start", state = AdminState.corresp_with_user_started)
@dp.message_handler(lambda message: message.from_user.id == config.admin_id,
commands = "start", state = AdminState.confirm_final_corresp_with_user)
async def start_for_admin_with_error(message: types.Message,  state: FSMContext):

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

@dp.message_handler(lambda message: message.from_user.id == config.admin_id, commands = "start")
async def start_for_admin(message: types.Message,  state: FSMContext):

    await AdminState.wait_reviews.set()

    await message.answer("–í—ã –∞–¥–º–∏–Ω")

@dp.callback_query_handler(lambda x: x.data.startswith("s_c_w_"), state = AdminState.wait_reviews)
async def start_corresp_with_user(callback, state: FSMContext):

    global offer_to_start_a_conversation_sent_admin

    await callback.answer()

    temp_cb_data = callback.data.replace("s_c_w_", "").split("_")

    current_user_id = int(temp_cb_data[0])

    if len(temp_cb_data) > 3:

        current_user_username = "".join(temp_cb_data[1:-1])
        current_chat_id = int(temp_cb_data[-1])

    else:

        current_user_username = temp_cb_data[1]
        current_chat_id = int(temp_cb_data[2])

    await AdminState.corresp_with_user_started.set()

    with open("offer_to_start_a_conversation_sent_admin.txt", "w", encoding = "utf-8") as file:

        file.write("True")
        offer_to_start_a_conversation_sent_admin = "True"

    user_state = dp.current_state(chat=current_chat_id, user=current_user_id)
    await user_state.set_state(UserState.corresp_with_admin_started)

    await callback.message.answer(
    f"–ë–æ—Ç: –ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{current_user_username} –Ω–∞—á–∞–ª–∞—Å—å", reply_markup = final_corresp_with_user_keyboard)

    await bot.send_message(current_user_id, text = "–ë–æ—Ç: –ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –Ω–∞—á–∞–ª–∞—Å—å")

    await state.update_data(current_user_id = current_user_id,
                            current_user_username = current_user_username,
                            current_chat_id = current_chat_id)

@dp.callback_query_handler(lambda x: x.data.startswith("s_c_w_"), state = AdminState.corresp_with_user_started)
async def second_start_corresp_with_user(callback):

        await callback.message.answer("–ë–æ—Ç: –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –Ω—ã–Ω–µ—à–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

@dp.message_handler(text = "–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É", state = AdminState.corresp_with_user_started)
async def confirm_final_corresp_with_user(message: types.Message, state: FSMContext):

    confirm_final_corresp_with_user_keyboard = types.ReplyKeyboardMarkup(row_width = 2, resize_keyboard = True)
    confirm_final_corresp_with_user_keyboard.add("–î–∞")
    confirm_final_corresp_with_user_keyboard.add("–ù–µ—Ç")

    data = await state.get_data()

    current_user_username = data["current_user_username"]

    await message.answer(f"–ë–æ—Ç: –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{current_user_username}?",
    reply_markup = confirm_final_corresp_with_user_keyboard)

    await AdminState.confirm_final_corresp_with_user.set()

@dp.message_handler(text = "–î–∞", state = AdminState.confirm_final_corresp_with_user)
async def accept_final_corresp_with_user(message: types.Message, state: FSMContext):

    global offer_to_start_a_conversation_sent_admin

    data = await state.get_data()

    user_state = dp.current_state(chat=data["current_chat_id"], user=data["current_user_id"])

    await user_state.reset_data()
    await user_state.set_state(None)

    await AdminState.wait_reviews.set()

    with open("offer_to_start_a_conversation_sent_admin.txt", "w", encoding = "utf-8") as file:

        file.write("False")
        offer_to_start_a_conversation_sent_admin = "False"

    current_user_username = data["current_user_username"]

    await message.answer(f"–ë–æ—Ç: –ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{current_user_username} –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
    reply_markup = types.ReplyKeyboardRemove())

    await bot.send_message(data["current_user_id"], text = "–ë–æ—Ç: –ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

@dp.message_handler(text = "–ù–µ—Ç", state = AdminState.confirm_final_corresp_with_user)
async def cancel_final_corresp_with_user(message: types.Message, state: FSMContext):

    data = await state.get_data()

    await AdminState.corresp_with_user_started.set()

    current_user_username = data["current_user_username"]

    await message.answer(f"–ë–æ—Ç: –ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{current_user_username} –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è",
    reply_markup = final_corresp_with_user_keyboard)

@dp.message_handler(commands = "start_mailing", state = AdminState.wait_reviews)
async def start_mailing(message: types.Message):

    await AdminState.wait_message_for_mailing.set()

    await message.answer(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup = cancel_start_mailing_keyboard)

@dp.message_handler(text = "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", state = AdminState.wait_message_for_mailing)
async def cancel_start_mailing(message: types.Message):

    await AdminState.wait_reviews.set()

    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup = types.ReplyKeyboardRemove())

@dp.message_handler(content_types = types.ContentTypes.ANY, state = AdminState.wait_message_for_mailing)
async def confirm_message_for_mailing(message: types.Message, state: FSMContext):

    await AdminState.confirm_message_for_mailing.set()

    if message.photo != []:

        await message.photo[-1].download(f"{message.photo[-1].file_id}.jpg")

        await state.update_data(required_message_for_mailing = f"üì¢<b>–†–∞—Å—Å—ã–ª–∫–∞</b>üì¢\n\n{message.caption}")
        await state.update_data(required_photo_for_mailing = f"{message.photo[-1].file_id}.jpg")

    else:

        await state.update_data(required_message_for_mailing = f"üì¢<b>–†–∞—Å—Å—ã–ª–∫–∞</b>üì¢\n\n{message.text}")
        await state.update_data(required_photo_for_mailing = None)

    confirm_message_for_mailing_keyboard = types.ReplyKeyboardMarkup(row_width = 2, resize_keyboard = True)
    confirm_message_for_mailing_keyboard.add("–î–∞")
    confirm_message_for_mailing_keyboard.add("–ù–µ—Ç")

    await message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç –æ—à–∏–±–æ–∫?", reply_markup = confirm_message_for_mailing_keyboard)

@dp.message_handler(text = "–ù–µ—Ç", state = AdminState.confirm_message_for_mailing)
async def change_message_for_mailing(message: types.Message, state: FSMContext):

    await AdminState.wait_message_for_mailing.set()

    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup = cancel_start_mailing_keyboard)

async def send_ad_with_photo(req_photo, text, cursor, message):

    sent_messages_—Åount = 0
    all_messages_count = 0

    async for row in cursor:

        photo = open(req_photo, "rb")

        try:

            await bot.send_photo(chat_id = row[0], photo=photo, caption = text, parse_mode = "HTML")

            sent_messages_—Åount += 1
            all_messages_count += 1

            await sleep(0.07)

        except aiogram.utils.exceptions.BadRequest:

            try:

                await sleep(uniform(1, 2))

                await bot.send_photo(chat_id = row[0], photo=photo, caption = text, parse_mode = "HTML")

                sent_messages_—Åount += 1
                all_messages_count += 1

            except:

                all_messages_count += 1

        except Exception as exc:

            print(exc)

            all_messages_count += 1

    await message.answer("""–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"""
                        f"""–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {sent_messages_—Åount}\n"""
                        f"""–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {all_messages_count}\n""")

    os.remove(req_photo)

async def send_ad_without_photo(text, cursor, message):

    sent_messages_—Åount = 0
    all_messages_count = 0

    async for row in cursor:

        try:

            await bot.send_message(row[0], text = text, parse_mode = "HTML")

            sent_messages_—Åount += 1
            all_messages_count += 1

            await sleep(0.07)

        except aiogram.utils.exceptions.BadRequest:

            try:

                await sleep(uniform(1, 2))

                await bot.send_message(row[0], text = text, parse_mode = "HTML")

                sent_messages_—Åount += 1
                all_messages_count += 1

            except:

                all_messages_count += 1

        except:

            all_messages_count += 1

    await message.answer("""–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"""
                        f"""–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {sent_messages_—Åount}\n"""
                        f"""–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {all_messages_count}\n""")

@dp.message_handler(text = "–î–∞", state = AdminState.confirm_message_for_mailing)
async def mass_send_messages(message: types.Message, state: FSMContext):

    await AdminState.wait_reviews.set()

    state_data = await state.get_data()

    required_message = state_data["required_message_for_mailing"]
    required_photo = state_data["required_photo_for_mailing"]

    if "None" in required_message:

        required_message = "üì¢<b>–†–∞—Å—Å—ã–ª–∫–∞</b>üì¢"

    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å", reply_markup = types.ReplyKeyboardRemove())

    cursor = await db.execute('SELECT * FROM users')

    if required_photo != None:

        await send_ad_with_photo(required_photo, required_message, cursor, message)

    else:

        await send_ad_without_photo(required_message, cursor, message)

@dp.message_handler(commands = "start_mailing", state = AdminState.confirm_final_corresp_with_user)
@dp.message_handler(commands = "start_mailing", state = AdminState.corresp_with_user_started)
async def print_error_after_start_mailing(message: types.Message):

    await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

@dp.message_handler(content_types = types.ContentTypes.ANY, state = AdminState.confirm_final_corresp_with_user)
@dp.message_handler(content_types = types.ContentTypes.ANY, state = AdminState.corresp_with_user_started)
async def send_message_to_user(message: types.Message, state: FSMContext):

    global offer_to_start_a_conversation_sent_admin

    data = await state.get_data()

    current_user_username = data["current_user_username"]

    try:

        await bot.send_message(data["current_user_id"], text = message.text)

    except aiogram.utils.exceptions.BotBlocked:

        user_state = dp.current_state(chat=data["current_chat_id"], user=data["current_user_id"])

        await user_state.reset_data()
        await user_state.set_state(None)

        await AdminState.wait_reviews.set()

        with open("offer_to_start_a_conversation_sent_admin.txt", "w", encoding = "utf-8") as file:

            file.write("False")
            offer_to_start_a_conversation_sent_admin = "False"

        await message.answer(f"–ë–æ—Ç: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{current_user_username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å –Ω–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
        reply_markup = types.ReplyKeyboardRemove())

    except:

        await message.answer(
        f"–ë–æ—Ç: –í–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{current_user_username} "
        "–ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç!")

@dp.message_handler(content_types = types.ContentTypes.ANY, state = AdminState.wait_reviews)
async def send_message_to_empty(message: types.Message, state: FSMContext):

    await message.answer("–ë–æ—Ç: –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–µ—Ä–µ–ø–∏—Å–æ–∫")
